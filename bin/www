#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('snake-server:server');
var http = require('http');

var common = require('../handler/common.js');
var io = require('../handler/socket.js');

/**
 * CUSTOM CODE
 * Get port from environment and store in Express, and Create HTTP server.
 */
var server, port;

app.then(app => {
  if (common.setting.useHTTPS) {
    port = normalizePort(process.env.PORT || 3637);
    let https = require('https');
    let keyDir = '/etc/httpd/conf.d/ssl/playror.com/'
    let credentials = {
      key: fs.readFileSync(`${keyDir}_wildcard_.playror.com_2019112770GZ.key.pem`, 'utf8'),
      cert: fs.readFileSync(`${keyDir}_wildcard_.playror.com_2019112770GZ.crt.pem`, 'utf8')
    };
    server = https.createServer(credentials, app).listen(port);
  } else {
    port = normalizePort(process.env.PORT || 3636);
    let http = require('http');
    server = http.createServer(app).listen(port);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.on('error', onError);
  server.on('listening', onListening);
  console.log(`[ROR] Running Server HTTP on ${port}`);

  io.attach(server, {
    cors: {
      origin: '*',
      pingTimeout: 60000,
      methods: ["GET", "POST"],
      // allowedHeaders: ["my-custom-header"],
      // credentials: true
    }
  });
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}